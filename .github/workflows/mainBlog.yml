name: New Generate Plant Blog Posts

on:
  # Run manually via workflow dispatch
  workflow_dispatch:

  # Run on schedule (3 times a week: Monday, Wednesday, Friday)
  schedule:
    - cron: '0 10 * * 1'  # 10:00 AM UTC every Monday
    - cron: '0 10 * * 3'  # 10:00 AM UTC every Wednesday
    - cron: '0 10 * * 5'  # 10:00 AM UTC every Friday

  # Run on push to main branch (optional)
  push:
    branches: [ main ]
    paths:
      - 'flask_app/research_v3/**'
      - 'flask_app/test.py'
      - 'flask_app/main.py'

env:
  # Target repository for blog posts
  TARGET_REPO: 'MrViincciLeRoy/startbootstrap-clean-blog-jekyll'
  TARGET_BRANCH: 'master'

jobs:
  generate-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout source repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.BLOG_DEPLOY_TOKEN }}
        fetch-depth: 0

    - name: Free up disk space
      run: |
        echo "Available disk space before cleanup:"
        df -h
        
        # Remove unnecessary tools and libraries
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/.ghcup
        sudo rm -rf /usr/share/swift
        
        # Clean apt cache
        sudo apt-get clean
        
        echo "Available disk space after cleanup:"
        df -h

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache Hugging Face models
      uses: actions/cache@v3
      with:
        path: ~/.cache/huggingface
        key: ${{ runner.os }}-huggingface-${{ hashFiles('**/requirements.txt', '**/test.py', '**/main.py') }}
        restore-keys: |
          ${{ runner.os }}-huggingface-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        
        # Install with no cache to save space
        if [ -f flask_app/requirements.txt ]; then
          pip install --no-cache-dir -r flask_app/requirements.txt
        elif [ -f requirements.txt ]; then
          pip install --no-cache-dir -r requirements.txt
        else
          pip install --no-cache-dir Flask transformers wikipedia-api beautifulsoup4 requests torch
        fi
        
        echo "Disk space after installation:"
        df -h

    - name: Create _posts directory
      run: mkdir -p _posts

    - name: Generate blog posts
      env:
        SERP_API_KEY: ${{ secrets.SERP_API_KEY }}
      run: |
        # Navigate to flask_app if it exists
        if [ -d "flask_app" ]; then
          cd flask_app
          echo "Working in flask_app directory"
        fi

        echo "Current directory: $(pwd)"
        ls -la

        # Run test.py if exists, else main.py
        if [ -f "test.py" ]; then
          echo "Running test.py..."
          python test.py
        elif [ -f "main.py" ]; then
          echo "Running main.py..."
          python main.py
        else
          echo "ERROR: Neither test.py nor main.py found!"
          exit 1
        fi

    - name: Locate and collect generated posts
      run: |
        # Search for posts in likely locations
        mkdir -p _posts

        # Check current dir and flask_app/_posts
        if [ -d "flask_app/_posts" ]; then
          cp flask_app/_posts/*.html flask_app/_posts/*.md _posts/ 2>/dev/null || true
        fi

        # Also check root _posts (in case script wrote there)
        if [ -d "./_posts" ] && [ "$(ls -A ./_posts 2>/dev/null)" ]; then
          cp ./_posts/*.html ./_posts/*.md _posts/ 2>/dev/null || true
        fi

        # Final check
        if [ ! -d "_posts" ] || [ -z "$(ls -A _posts 2>/dev/null)" ]; then
          echo "ERROR: No blog posts were generated in _posts/!"
          echo "Searching for any .html or .md files..."
          find . -type f \( -name "*.html" -o -name "*.md" \) -exec ls -l {} \;
          exit 1
        fi

        echo "Generated posts:"
        ls -la _posts/

    - name: Commit and push updated database
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        cd flask_app/research_v3
        if [ -f flora_data.db ]; then
          git add flora_data.db
          
          # Check if there are changes to commit
          if ! git diff --cached --quiet; then
            git commit -m "Update flora database - article generated $(date +'%Y-%m-%d %H:%M:%S UTC')"
            
            # Fetch latest changes from remote
            git fetch origin main
            
            # Rebase local commits on top of remote changes
            git rebase origin/main
            
            # Push to remote
            git push origin main
            echo "✅ Database updated and pushed successfully!"
          else
            echo "ℹ️ No database changes to commit."
          fi
        else
          echo "⚠️ Database file not found at flask_app/research_v3/flora_data.db"
        fi

    - name: Checkout target blog repository
      uses: actions/checkout@v4
      with:
        repository: ${{ env.TARGET_REPO }}
        token: ${{ secrets.BLOG_DEPLOY_TOKEN }}
        path: blog-repo
        ref: ${{ env.TARGET_BRANCH }}
        fetch-depth: 0

    - name: Copy posts to blog repository
      run: |
        mkdir -p blog-repo/_posts
        cp _posts/*.html _posts/*.md blog-repo/_posts/ 2>/dev/null || echo "No files to copy"

        echo "Copied to blog repo:"
        ls -la blog-repo/_posts/

    - name: Configure Git and commit blog posts
      run: |
        cd blog-repo
        git config user.name "Plant Bot"
        git config user.email "miguelmehgoss@gmail.com"

        git add _posts/

        if [ -n "$(git status --porcelain)" ]; then
          # Fetch latest changes from remote
          git fetch origin ${{ env.TARGET_BRANCH }}
          
          # Rebase local commits on top of remote changes
          git rebase origin/${{ env.TARGET_BRANCH }}
          
          git commit -m "Add new plant blog posts

Generated automatically by GitHub Actions
Workflow: ${{ github.workflow }}
Run: ${{ github.run_number }}
Timestamp: $(date -u)"
          
          git push origin ${{ env.TARGET_BRANCH }}
          echo "✅ Successfully pushed new blog posts!"
        else
          echo "ℹ️ No changes to commit."
        fi

    - name: Create summary
      if: always()
      run: |
        echo "## Blog Generation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Target repo:** ${{ env.TARGET_REPO }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ env.TARGET_BRANCH }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ -d "_posts" ] && [ "$(ls -A _posts 2>/dev/null)" ]; then
          echo "**Generated posts:**" >> $GITHUB_STEP_SUMMARY
          for f in _posts/*; do
            if [ -f "$f" ]; then
              size=$(stat -c%s "$f" 2>/dev/null || stat -f%z "$f")
              echo "- $(basename "$f") (${size} bytes)" >> $GITHUB_STEP_SUMMARY
            fi
          done
        else
          echo "**❌ ERROR:** No posts generated!" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**🌐 Blog:** [View Site](https://${{ github.repository_owner }}.github.io/startbootstrap-clean-blog-jekyll/)" >> $GITHUB_STEP_SUMMARY

  test-jekyll-build:
    needs: generate-and-deploy
    if: success()
    runs-on: ubuntu-latest

    steps:
    - name: Checkout blog repository
      uses: actions/checkout@v4
      with:
        repository: MrViincciLeRoy/startbootstrap-clean-blog-jekyll
        token: ${{ secrets.BLOG_DEPLOY_TOKEN }}
        ref: master
        fetch-depth: 0

    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true

    - name: Install Jekyll and build site
      run: |
        bundle install
        bundle exec jekyll build --verbose

    - name: Confirm build success
      run: |
        echo "✅ Jekyll site built successfully!"
        echo "Recent posts:"
        find _site -path "*posts*" -name "*.html" | head -5
