name: Flask V4 Research System Tests

on:
  
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y sqlite3
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-mock flask
        pip install requests beautifulsoup4 lxml
        pip install faiss-cpu sentence-transformers transformers torch
        pip install PyPDF2 wikipediaapi pandas
        pip install python-dotenv
    
    - name: Verify directory structure
      run: |
        echo "Current directory structure:"
        ls -la
        echo ""
        echo "FlaskApp structure:"
        ls -la FlaskApp/ || echo "FlaskApp directory not found"
        echo ""
        echo "Services V4 structure:"
        ls -la FlaskApp/services/v4/ || echo "V4 directory not found"
    
    - name: Create necessary directories
      run: |
        mkdir -p FlaskApp/services/v4/db
        mkdir -p FlaskApp/_posts
        mkdir -p FlaskApp/research_v4
    
    - name: Check if database exists
      run: |
        if [ -f "FlaskApp/services/v4/db/flora_data.db" ]; then
          echo "Database found!"
          sqlite3 FlaskApp/services/v4/db/flora_data.db "SELECT COUNT(*) as count FROM flora_plants;" || echo "Database exists but may be empty"
        else
          echo "Database not found, will be created during tests"
        fi
    
    - name: Run setup script
      working-directory: FlaskApp
      run: |
        python setup_v4.py || echo "Setup script completed with warnings"
    
    - name: Verify configuration files
      run: |
        echo "Checking configuration files:"
        ls -la FlaskApp/services/v4/config/ || echo "Config directory not found"
        
        if [ -f "FlaskApp/services/v4/config/ai_settings.json" ]; then
          echo "✓ ai_settings.json exists"
        else
          echo "✗ ai_settings.json missing"
        fi
        
        if [ -f "FlaskApp/services/v4/config/config.json" ]; then
          echo "✓ config.json exists"
        else
          echo "✗ config.json missing"
        fi
    
    - name: Test imports
      working-directory: FlaskApp
      run: |
        python -c "
        import sys
        print('Testing imports...')
        
        try:
            from services.v4.ConfigManager import ConfigManager
            print('✓ ConfigManager')
        except Exception as e:
            print(f'✗ ConfigManager: {e}')
            sys.exit(1)
        
        try:
            from services.v4.FloraDatabase import FloraDatabase
            print('✓ FloraDatabase')
        except Exception as e:
            print(f'✗ FloraDatabase: {e}')
            sys.exit(1)
        
        try:
            from services.v4.Spider import EnhancedPlantSpider
            print('✓ Spider')
        except Exception as e:
            print(f'✗ Spider: {e}')
            sys.exit(1)
        
        try:
            from services.v4.RagSys import RAGSystem
            print('✓ RagSys')
        except Exception as e:
            print(f'✗ RagSys: {e}')
            sys.exit(1)
        
        try:
            from services.v4.ArtGenSys import EnhancedPlantArticleGenerator
            print('✓ ArtGenSys')
        except Exception as e:
            print(f'✗ ArtGenSys: {e}')
            sys.exit(1)
        
        print('All imports successful!')
        "
    
    - name: Test ConfigManager
      working-directory: FlaskApp
      run: |
        python -c "
        from services.v4.ConfigManager import ConfigManager
        
        print('Testing ConfigManager...')
        config = ConfigManager(verbose=True)
        
        # Test getters
        assert config.get_embedding_model() is not None
        assert config.get_llm_model() is not None
        assert config.get_device() is not None
        assert config.get_search_delay() > 0
        assert config.get_max_sources() > 0
        
        print('✓ ConfigManager tests passed')
        "
    
    - name: Test FloraDatabase
      working-directory: FlaskApp
      run: |
        python -c "
        from services.v4.ConfigManager import ConfigManager
        from services.v4.FloraDatabase import FloraDatabase
        
        print('Testing FloraDatabase...')
        config = ConfigManager()
        db = FloraDatabase(config)
        
        # Create schema if needed
        db.create_default_schema()
        
        # Get statistics
        stats = db.get_statistics()
        print(f'Database stats: {stats}')
        
        print('✓ FloraDatabase tests passed')
        "
    
    - name: Test RAGSystem (embedding only)
      working-directory: FlaskApp
      run: |
        python -c "
        from services.v4.ConfigManager import ConfigManager
        from services.v4.RagSys import RAGSystem
        
        print('Testing RAGSystem...')
        config = ConfigManager()
        rag = RAGSystem(config)
        
        # Test with minimal data
        test_texts = ['Test text 1', 'Test text 2']
        test_metadata = [{'source': 'test1'}, {'source': 'test2'}]
        
        rag.build_index(test_texts, test_metadata)
        
        # Test retrieval
        results = rag.retrieve('test', k=1)
        assert len(results) > 0
        
        print('✓ RAGSystem tests passed')
        "
    
    - name: Test ContentCleaner
      working-directory: FlaskApp
      run: |
        python -c "
        from services.v4.ArtGenSys import ContentCleaner
        
        print('Testing ContentCleaner...')
        cleaner = ContentCleaner({
            'remove_citations': True,
            'remove_source_markers': True,
            'remove_incomplete_paragraphs': True,
            'min_paragraph_length': 50
        })
        
        test_text = 'This is a test [1]. It has citations [Source: Wikipedia].'
        cleaned = cleaner.remove_citations(test_text)
        assert '[1]' not in cleaned
        
        print('✓ ContentCleaner tests passed')
        "
    
    - name: Run full test suite
      working-directory: FlaskApp
      run: |
        python test_v4.py
      env:
        SERP_API_KEY: ${{ secrets.SERP_API_KEY }}
    
    - name: Test article generation (mock)
      working-directory: FlaskApp
      run: |
        python -c "
        from services.v4.ConfigManager import ConfigManager
        from services.v4.ArtGenSys import EnhancedPlantArticleGenerator
        from datetime import datetime
        
        print('Testing article generation...')
        config = ConfigManager()
        generator = EnhancedPlantArticleGenerator(
            config=config,
            rag_system=None,
            fetch_images=False
        )
        
        # Create minimal article
        mock_data = [{
            'text': 'Test plant information.',
            'metadata': {'source': 'test', 'url': 'http://test.com'}
        }]
        
        article = generator.generate_full_article('Test Plant', mock_data)
        assert len(article) > 100
        assert '---' in article  # Front matter
        assert 'Test Plant' in article
        
        print('✓ Article generation tests passed')
        "
    
    - name: Check generated files
      run: |
        echo "Checking for generated files:"
        ls -la FlaskApp/_posts/ || echo "No posts generated"
        ls -la FlaskApp/research_v4/ || echo "No research files"
    
    - name: Generate test report
      if: always()
      run: |
        echo "# Test Report" > test_report.md
        echo "" >> test_report.md
        echo "## Environment" >> test_report.md
        echo "- Python: ${{ matrix.python-version }}" >> test_report.md
        echo "- OS: Ubuntu Latest" >> test_report.md
        echo "" >> test_report.md
        echo "## Test Results" >> test_report.md
        echo "See workflow logs for detailed results" >> test_report.md
    
    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-artifacts-py${{ matrix.python-version }}
        path: |
          FlaskApp/_posts/
          FlaskApp/research_v4/
          test_report.md
        retention-days: 7
    
    - name: Test summary
      if: always()
      run: |
        echo "================================================"
        echo "Test Summary for Python ${{ matrix.python-version }}"
        echo "================================================"
        echo "✓ Setup completed"
        echo "✓ Dependencies installed"
        echo "✓ Module imports verified"
        echo "✓ Configuration system tested"
        echo "✓ Database operations tested"
        echo "✓ RAG system tested"
        echo "✓ Article generation tested"
        echo "================================================"

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install linting tools
      run: |
        pip install flake8 black isort
    
    - name: Run flake8
      run: |
        flake8 FlaskApp/services/v4/ --count --select=E9,F63,F7,F82 --show-source --statistics || echo "Linting warnings found"
    
    - name: Check code formatting with black
      run: |
        black --check FlaskApp/services/v4/ || echo "Code formatting issues found"
    
    - name: Check import sorting
      run: |
        isort --check-only FlaskApp/services/v4/ || echo "Import sorting issues found"
